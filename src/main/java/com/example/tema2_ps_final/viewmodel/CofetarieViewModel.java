package com.example.tema2_ps_final.viewmodel;

import com.example.tema2_ps_final.model.Cofetarie;
import com.example.tema2_ps_final.model.repository.CofetarieRepository;
import com.example.tema2_ps_final.viewmodel.dto.CofetarieDTO;
import javafx.beans.property.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.Alert;

import java.util.List;
import java.util.stream.Collectors;

public class CofetarieViewModel {
    private final CofetarieRepository repository;

    // Observable properties
    private final ObservableList<CofetarieDTO> cofetarieList = FXCollections.observableArrayList();
    private final StringProperty adresa = new SimpleStringProperty();
    private final ObjectProperty<CofetarieDTO> selectedCofetarie = new SimpleObjectProperty<>();

    // Commands
    private final Command addCommand;
    private final Command updateCommand;
    private final Command deleteCommand;
    private final Command clearFieldsCommand;

    public CofetarieViewModel() {
        this.repository = CofetarieRepository.getInstance();

        loadCofetarii(); // Load initial list of bakeries
        setupListeners();

        this.addCommand = new Command(this::addCofetarie);
        this.updateCommand = new Command(this::updateCofetarie);
        this.deleteCommand = new Command(this::deleteCofetarie);
        this.clearFieldsCommand = new Command(this::clearFields);
    }

    // Method to load all bakeries into the observable list
    public void loadCofetarii() {
        List<CofetarieDTO> dtos = repository.getTableContent().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
        cofetarieList.setAll(dtos);
    }

    // Method to convert Cofetarie to CofetarieDTO
    private CofetarieDTO convertToDTO(Cofetarie cofetarie) {
        return new CofetarieDTO(cofetarie.getId(), cofetarie.getAddress());
    }

    // Method to add a new Cofetarie
    public void addCofetarie() {
        Cofetarie cofetarie = createCofetarieFromFields();
        if (cofetarie != null) {
            Cofetarie insertedCofetarie = repository.insert(cofetarie);
            if (insertedCofetarie != null) {
                cofetarieList.add(convertToDTO(insertedCofetarie));
                showAlert("Success", "Cofetarie added successfully!", Alert.AlertType.INFORMATION);
            } else {
                showAlert("Failure", "Failed to add cofetarie.", Alert.AlertType.ERROR);
            }
        } else {
            showAlert("Failure", "Invalid cofetarie data.", Alert.AlertType.ERROR);
        }
    }

    // Method to delete a selected Cofetarie
    private void deleteCofetarie() {
        if (selectedCofetarie.get() != null && repository.delete(selectedCofetarie.get().getId_cofetarie()) != 0) {
            loadCofetarii(); // Reload list after deletion
            showAlert("Success", "Cofetarie deleted successfully!", Alert.AlertType.INFORMATION);
        } else {
            showAlert("Failure", "Failed to delete cofetarie.", Alert.AlertType.ERROR);
        }
    }

    // Method to update a selected Cofetarie
    private void updateCofetarie() {
        if (selectedCofetarie.get() == null) return;

        Cofetarie cofetarie = createCofetarieFromFields();
        if (cofetarie != null) {
            cofetarie.setId(selectedCofetarie.get().getId_cofetarie());
            if (repository.update(cofetarie)) {
                loadCofetarii(); // Reload list after update
                showAlert("Success", "Cofetarie updated successfully!", Alert.AlertType.INFORMATION);
            } else {
                showAlert("Failure", "Failed to update cofetarie.", Alert.AlertType.ERROR);
            }
        }
    }

    // Create a Cofetarie object from the fields
    private Cofetarie createCofetarieFromFields() {
        try {
            return new Cofetarie(adresa.get()); // id is auto-generated by DB, so set it to 0 here
        } catch (Exception e) {
            return null;
        }
    }

    // Clear the fields for adding/updating a Cofetarie
    private void clearFields() {
        adresa.set("");
    }

    // Show an alert with a message
    private void showAlert(String title, String message, Alert.AlertType alertType) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    // Setup listeners for selecting a Cofetarie
    private void setupListeners() {
        selectedCofetarie.addListener((observable, oldValue, newValue) -> {
            if (newValue != null) {
                adresa.set(newValue.getAdresa_cofetarie());
            }
        });
    }

    // Getter methods for the observable properties
    public ObservableList<CofetarieDTO> getCofetarieList() {
        return cofetarieList;
    }


    public StringProperty adresaProperty() {
        return adresa;
    }

    public ObjectProperty<CofetarieDTO> selectedCofetarieProperty() {
        return selectedCofetarie;
    }

    public Command getAddCommand() {
        return addCommand;
    }

    public Command getUpdateCommand() {
        return updateCommand;
    }

    public Command getDeleteCommand() {
        return deleteCommand;
    }

    public Command getClearFieldsCommand() {
        return clearFieldsCommand;
    }
}
